# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'Tool_Main_Frame.ui'
# Created by: PyQt5 UI code generator 5.11.3
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (QInputDialog,QFileDialog,QMessageBox,QWidget,QMainWindow,QDialog,QTabWidget,QSizePolicy,QTableWidget)
from Load_STDF import Ui_Load_STDF
from Data_Table_Properties_Window import Ui_Data_Table_Properties_Window

from PyQt5.QtGui import QIcon
class Ui_MainWindow(QMainWindow):

    def __init__(self):
        super(Ui_MainWindow,self).__init__()
        self.Loaded_Data_Files={}
        self.Loaded_Data_File_count=[]        
        self.File_Path=[]
        self.Imported_file_data=[]
        self.Tab_List=[]
    def setupUi(self, MainWindow):
        global Main_Window
        self.Main_Window=MainWindow
        self.Main_Window.setObjectName("MainWindow")
        self.Main_Window.setWindowModality(QtCore.Qt.ApplicationModal)
        self.Main_Window.resize(1390, 914)
        self.Main_Window.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(self.Main_Window)
        self.centralwidget.setObjectName("centralwidget")
        #tab
        
        self.tabWidget = QtWidgets.QTabWidget(MainWindow)
        self.tabWidget.setGeometry(QtCore.QRect(35, 55,1380, 900))#, 1380, 900
        self.tabWidget.setSizePolicy(QSizePolicy.Expanding,QSizePolicy.Expanding)
        self.tabWidget.setTabsClosable(True)
        self.tabWidget.setMovable(True)
        self.tabWidget.tabCloseRequested.connect(self.CloseTab)
        self.Add_Tab_button_plus=QtWidgets.QToolButton()        
        self.Add_Tab_button_plus.setText("+")
        self.tabWidget.setCornerWidget(self.Add_Tab_button_plus,QtCore.Qt.TopLeftCorner)
        self.Add_Tab_button_plus1=QtWidgets.QToolButton()        
        self.Add_Tab_button_plus1.setText("+")
        self.tabWidget.setCornerWidget(self.Add_Tab_button_plus1,QtCore.Qt.TopRightCorner)
        self.Add_Tab_button_plus.clicked.connect(self.Add_Tab)
        self.Add_Tab_button_plus1.clicked.connect(self.Add_Tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setMinimumSize(QtCore.QSize(0, 0))
        self.tabWidget.setObjectName("tabWidget") 
        self.Add_Tool_Bar()
        self.Menu_bar()  
        self.tableWidget = QtWidgets.QTableWidget()
        self.tableWidget.setGeometry(QtCore.QRect(0, 0, 350, 150))
        self.tableWidget.setFocusPolicy(QtCore.Qt.NoFocus)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(2)
         
        #self.Add_Table()      
    def Menu_bar(self):
        self.Main_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self.Main_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1531, 21))
        self.menubar.setObjectName("menubar")
        self.File = QtWidgets.QMenu(self.menubar)
        self.File.setObjectName("File")
        self.Export = QtWidgets.QMenu(self.File)
        self.Export.setObjectName("Export")
        self.Open_From = QtWidgets.QMenu(self.File)
        self.Open_From.setObjectName("Open_From")
        self.Menu = QtWidgets.QMenu(self.menubar)
        self.Menu.setObjectName("Menu")
        self.MarkedRows = QtWidgets.QMenu(self.Menu)
        self.MarkedRows.setObjectName("MarkedRows")
        self.Copy_Special = QtWidgets.QMenu(self.Menu)
        self.Copy_Special.setObjectName("Copy_Special")
        self.Paste_Special = QtWidgets.QMenu(self.Menu)
        self.Paste_Special.setObjectName("Paste_Special")
        self.View = QtWidgets.QMenu(self.menubar)
        self.View.setObjectName("View")
        self.Help = QtWidgets.QMenu(self.menubar)
        self.Help.setObjectName("Help")
        self.Insert = QtWidgets.QMenu(self.menubar)
        self.Insert.setObjectName("Insert")
        self.Tools = QtWidgets.QMenu(self.menubar)
        self.Tools.setObjectName("Tools")
        self.Analysis = QtWidgets.QMenu(self.Tools)
        self.Analysis.setObjectName("Analysis")
        self.Main_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self.Main_Window)
        self.statusbar.setObjectName("statusbar")
        self.Main_Window.setStatusBar(self.statusbar)
        #ACtions
        self.actionLoad = QtWidgets.QAction(self.Main_Window)
        self.actionLoad.setObjectName("actionLoad")
        self.actionSave = QtWidgets.QAction(self.Main_Window)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_As = QtWidgets.QAction(self.Main_Window)
        self.actionSave_As.setObjectName("actionSave_As")
        # Exit
        self.actionExit = QtWidgets.QAction(self.Main_Window)
        self.actionExit.setObjectName("actionExit")
        self.actionExit.triggered.connect(self.Exit)
        self.actionExit.setShortcut("Ctrl+Q")
        self.actionOpen = QtWidgets.QAction(self.Main_Window)
        self.actionOpen.setObjectName("actionOpen")        
        self.actionUndo = QtWidgets.QAction(self.Main_Window)
        self.actionUndo.setObjectName("actionUndo")
        self.actionRedo = QtWidgets.QAction(self.Main_Window)
        self.actionRedo.setObjectName("actionRedo")
        self.actionCopy = QtWidgets.QAction(self.Main_Window)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QtWidgets.QAction(self.Main_Window)
        self.actionPaste.setObjectName("actionPaste")
        self.actionDelete_Active_Page = QtWidgets.QAction(self.Main_Window)
        self.actionDelete_Active_Page.setObjectName("actionDelete_Active_Page")
        self.actionReset_AllFilters = QtWidgets.QAction(self.Main_Window)
        self.actionReset_AllFilters.setObjectName("actionReset_AllFilters")
        self.actionMark_Filtered_Rows = QtWidgets.QAction(self.Main_Window)
        self.actionMark_Filtered_Rows.setObjectName("actionMark_Filtered_Rows")
        self.actionUnmark = QtWidgets.QAction(self.Main_Window)
        self.actionUnmark.setObjectName("actionUnmark")
        self.actionInvert = QtWidgets.QAction(self.Main_Window)
        self.actionInvert.setObjectName("actionInvert")
        self.actionDelete = QtWidgets.QAction(self.Main_Window)
        self.actionDelete.setObjectName("actionDelete")
        self.actionFilter_To = QtWidgets.QAction(self.Main_Window)
        self.actionFilter_To.setObjectName("actionFilter_To")
        self.actionFilter_Out = QtWidgets.QAction(self.Main_Window)
        self.actionFilter_Out.setObjectName("actionFilter_Out")
        self.actionAdd_Marked_to_List = QtWidgets.QAction(self.Main_Window)
        self.actionAdd_Marked_to_List.setObjectName("actionAdd_Marked_to_List")
        self.actionNew_List_from_Marked = QtWidgets.QAction(self.Main_Window)
        self.actionNew_List_from_Marked.setObjectName("actionNew_List_from_Marked")
        self.actionRemove_Marked_From_List = QtWidgets.QAction(self.Main_Window)
        self.actionRemove_Marked_From_List.setObjectName("actionRemove_Marked_From_List")
        self.actionSerach_Marked_in_List = QtWidgets.QAction(self.Main_Window)
        self.actionSerach_Marked_in_List.setObjectName("actionSerach_Marked_in_List")
        self.actionData_for_All_Items = QtWidgets.QAction(self.Main_Window)
        self.actionData_for_All_Items.setObjectName("actionData_for_All_Items")
        self.actionData_for_Marked_Rows = QtWidgets.QAction(self.Main_Window)
        self.actionData_for_Marked_Rows.setObjectName("actionData_for_Marked_Rows")
        self.actionAll_Rows = QtWidgets.QAction(self.Main_Window)
        self.actionAll_Rows.setObjectName("actionAll_Rows")
        self.actionFiltered_Rows = QtWidgets.QAction(self.Main_Window)
        self.actionFiltered_Rows.setObjectName("actionFiltered_Rows")
        self.actionMarked_Rows = QtWidgets.QAction(self.Main_Window)
        self.actionMarked_Rows.setObjectName("actionMarked_Rows")
        self.actionActive_Page = QtWidgets.QAction(self.Main_Window)
        self.actionActive_Page.setObjectName("actionActive_Page")
        self.actionActive_Visualisation = QtWidgets.QAction(self.Main_Window)
        self.actionActive_Visualisation.setObjectName("actionActive_Visualisation")
        self.actionActive_Visualization_Image = QtWidgets.QAction(self.Main_Window)
        self.actionActive_Visualization_Image.setObjectName("actionActive_Visualization_Image")
        self.actionShow_Import_Settings = QtWidgets.QAction(self.Main_Window)
        self.actionShow_Import_Settings.setObjectName("actionShow_Import_Settings")
        self.actionAs_New_Columns = QtWidgets.QAction(self.Main_Window)
        self.actionAs_New_Columns.setObjectName("actionAs_New_Columns")
        self.actionAs_New_Rows = QtWidgets.QAction(self.Main_Window)
        self.actionAs_New_Rows.setObjectName("actionAs_New_Rows")
        self.actionReset_All_Marking = QtWidgets.QAction(self.Main_Window)
        self.actionReset_All_Marking.setObjectName("actionReset_All_Marking")
        self.actionData_Connection_Properties = QtWidgets.QAction(self.Main_Window)
        self.actionData_Connection_Properties.setObjectName("actionData_Connection_Properties")
        self.actionData_Table_Properties = QtWidgets.QAction(self.Main_Window)
        self.actionData_Table_Properties.setObjectName("actionData_Table_Properties")
        self.actionData_Table_Properties.triggered.connect(self.Open_Data_Table_properties_window)
        self.actionColumn_Properties = QtWidgets.QAction(self.Main_Window)
        self.actionColumn_Properties.setObjectName("actionColumn_Properties")
        self.actionDocument_Properties = QtWidgets.QAction(self.Main_Window)
        self.actionDocument_Properties.setObjectName("actionDocument_Properties")
        self.actionData_Function_Properties = QtWidgets.QAction(self.Main_Window)
        self.actionData_Function_Properties.setObjectName("actionData_Function_Properties")
        self.actionFilters = QtWidgets.QAction(self.Main_Window)
        self.actionFilters.setObjectName("actionFilters")
        self.actionData = QtWidgets.QAction(self.Main_Window)
        self.actionData.setObjectName("actionData")
        self.Data_Table = QtWidgets.QAction("Data_Table",self.Main_Window)
        self.Data_Table.setObjectName("Data_Table")
        self.Data_Table.triggered.connect(self.Add_Table)
        self.New_Page = QtWidgets.QAction(self.Main_Window)
        self.New_Page.setObjectName("New_Page")
        self.New_Page.triggered.connect(self.Add_Tab)
        self.actionDuplicate_Activate_Page = QtWidgets.QAction(self.Main_Window)
        self.actionDuplicate_Activate_Page.setObjectName("actionDuplicate_Activate_Page")
        self.actionCalculated_Column = QtWidgets.QAction(self.Main_Window)
        self.actionCalculated_Column.setObjectName("actionCalculated_Column")
        self.actionColumns = QtWidgets.QAction(self.Main_Window)
        self.actionColumns.setObjectName("actionColumns")
        self.actionRows = QtWidgets.QAction(self.Main_Window)
        self.actionRows.setObjectName("actionRows")
        self.actionFind = QtWidgets.QAction(self.Main_Window)
        self.actionFind.setObjectName("actionFind")
        self.actionTest_Summary_Report_TSR_Chart_Galliers = QtWidgets.QAction(self.Main_Window)
        self.actionTest_Summary_Report_TSR_Chart_Galliers.setObjectName("actionTest_Summary_Report_TSR_Chart_Galliers")
        self.actionAnalysis_of_Varicance = QtWidgets.QAction(self.Main_Window)
        self.actionAnalysis_of_Varicance.setObjectName("actionAnalysis_of_Varicance")
        self.actionMeasuement_System_Comparision_MSC_Analysis = QtWidgets.QAction(self.Main_Window)
        self.actionMeasuement_System_Comparision_MSC_Analysis.setObjectName("actionMeasuement_System_Comparision_MSC_Analysis")
        self.actionSPC_Statistical_Process_Controll = QtWidgets.QAction(self.Main_Window)
        self.actionSPC_Statistical_Process_Controll.setObjectName("actionSPC_Statistical_Process_Controll")
        self.actionFrequency_Pareto = QtWidgets.QAction(self.Main_Window)
        self.actionFrequency_Pareto.setObjectName("actionFrequency_Pareto")
        self.actionClose = QtWidgets.QAction(self.Main_Window)
        self.actionClose.setObjectName("actionClose")
        self.actionAdd_Data_Table = QtWidgets.QAction(self.Main_Window)
        self.actionAdd_Data_Table.setObjectName("actionAdd_Data_Table")
        self.actionReplae_Data_Table = QtWidgets.QAction(self.Main_Window)
        self.actionReplae_Data_Table.setObjectName("actionReplae_Data_Table")
        self.actionData_to_Excel = QtWidgets.QAction(self.Main_Window)
        self.actionData_to_Excel.setObjectName("actionData_to_Excel")
        self.actionData_CSV = QtWidgets.QAction(self.Main_Window)
        self.actionData_CSV.setObjectName("actionData_CSV")
        self.actionData_to_Text = QtWidgets.QAction(self.Main_Window)
        self.actionData_to_Text.setObjectName("actionData_to_Text")
        self.actionSTDF_V4 = QtWidgets.QAction(self.Main_Window)
        self.actionSTDF_V4.setObjectName("actionSTDF_V4")
        self.actionSTDF_V4.triggered.connect(self.Open_Load_Action)
        self.actionSTDF_V4.setShortcut('Ctrl+L+S')
        self.actionEXCEL = QtWidgets.QAction(self.Main_Window)
        self.actionEXCEL.setObjectName("actionEXCEL")
        self.actionCSV = QtWidgets.QAction(self.Main_Window)
        self.actionCSV.setObjectName("actionCSV")
        self.actionTEXT = QtWidgets.QAction(self.Main_Window)
        self.actionTEXT.setObjectName("actionTEXT")
        self.Export.addAction(self.actionData_to_Excel)
        self.Export.addAction(self.actionData_CSV)
        self.Export.addAction(self.actionData_to_Text)
        self.Open_From.addAction(self.actionSTDF_V4)
        self.Open_From.addAction(self.actionEXCEL)
        self.Open_From.addAction(self.actionCSV)
        self.Open_From.addAction(self.actionTEXT)
        self.File.addAction(self.actionOpen)
        self.File.addAction(self.Open_From.menuAction())
        self.File.addSeparator()
        self.File.addAction(self.actionSave)
        self.File.addAction(self.actionSave_As)
        self.File.addAction(self.actionAdd_Data_Table)
        self.File.addAction(self.actionReplae_Data_Table)
        self.File.addSeparator()
        self.File.addAction(self.Export.menuAction())
        self.File.addSeparator()
        self.File.addAction(self.actionExit)
        self.MarkedRows.addAction(self.actionUnmark)
        self.MarkedRows.addAction(self.actionInvert)
        self.MarkedRows.addAction(self.actionDelete)
        self.MarkedRows.addAction(self.actionFilter_To)
        self.MarkedRows.addAction(self.actionFilter_Out)
        self.MarkedRows.addSeparator()
        self.MarkedRows.addAction(self.actionAdd_Marked_to_List)
        self.MarkedRows.addAction(self.actionNew_List_from_Marked)
        self.MarkedRows.addAction(self.actionRemove_Marked_From_List)
        self.MarkedRows.addAction(self.actionSerach_Marked_in_List)
        self.Copy_Special.addAction(self.actionData_for_All_Items)
        self.Copy_Special.addAction(self.actionData_for_Marked_Rows)
        self.Copy_Special.addSeparator()
        self.Copy_Special.addAction(self.actionAll_Rows)
        self.Copy_Special.addAction(self.actionFiltered_Rows)
        self.Copy_Special.addAction(self.actionMarked_Rows)
        self.Copy_Special.addSeparator()
        self.Copy_Special.addAction(self.actionActive_Page)
        self.Copy_Special.addAction(self.actionActive_Visualisation)
        self.Copy_Special.addAction(self.actionActive_Visualization_Image)
        self.Paste_Special.addAction(self.actionShow_Import_Settings)
        self.Paste_Special.addSeparator()
        self.Paste_Special.addAction(self.actionAs_New_Columns)
        self.Paste_Special.addAction(self.actionAs_New_Rows)
        self.Menu.addAction(self.actionUndo)
        self.Menu.addAction(self.actionRedo)
        self.Menu.addSeparator()
        self.Menu.addAction(self.actionCopy)
        self.Menu.addAction(self.Copy_Special.menuAction())
        self.Menu.addAction(self.actionPaste)
        self.Menu.addAction(self.Paste_Special.menuAction())
        self.Menu.addSeparator()
        self.Menu.addAction(self.actionDelete_Active_Page)
        self.Menu.addSeparator()
        self.Menu.addAction(self.actionReset_AllFilters)
        self.Menu.addAction(self.actionMark_Filtered_Rows)
        self.Menu.addAction(self.MarkedRows.menuAction())
        self.Menu.addAction(self.actionReset_All_Marking)
        self.Menu.addSeparator()
        self.Menu.addAction(self.actionData_Connection_Properties)
        self.Menu.addAction(self.actionData_Table_Properties)
        self.Menu.addAction(self.actionColumn_Properties)
        self.Menu.addSeparator()
        self.Menu.addAction(self.actionDocument_Properties)
        self.Menu.addAction(self.actionData_Function_Properties)
        self.View.addAction(self.actionFilters)
        self.View.addAction(self.actionData)
        self.View.addAction(self.Data_Table)
        self.Help.addSeparator()
        self.Insert.addAction(self.New_Page)
        self.Insert.addAction(self.actionDuplicate_Activate_Page)
        self.Insert.addSeparator()
        self.Insert.addAction(self.actionCalculated_Column)
        self.Insert.addSeparator()
        self.Insert.addAction(self.actionColumns)
        self.Insert.addAction(self.actionRows)
        self.Analysis.addAction(self.actionTest_Summary_Report_TSR_Chart_Galliers)
        self.Analysis.addAction(self.actionAnalysis_of_Varicance)
        self.Analysis.addAction(self.actionMeasuement_System_Comparision_MSC_Analysis)
        self.Analysis.addAction(self.actionSPC_Statistical_Process_Controll)
        self.Analysis.addAction(self.actionFrequency_Pareto)
        self.Tools.addAction(self.actionFind)
        self.Tools.addSeparator()
        self.Tools.addAction(self.Analysis.menuAction())
        self.menubar.addAction(self.File.menuAction())
        self.menubar.addAction(self.Menu.menuAction())
        self.menubar.addAction(self.View.menuAction())
        self.menubar.addAction(self.Help.menuAction())
        self.menubar.addAction(self.Insert.menuAction())
        self.menubar.addAction(self.Tools.menuAction())
        self.retranslateUi(self.Main_Window)
        #self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self.Main_Window)
    def retranslateUi(self,Main_Window):
        _translate = QtCore.QCoreApplication.translate
        self.Main_Window.setWindowTitle(_translate("MainWindow", "GOURISANKAR_TOOL"))
        self.File.setTitle(_translate("MainWindow", "File"))
        self.Export.setTitle(_translate("MainWindow", "Export"))
        self.Open_From.setTitle(_translate("MainWindow", "Open From"))
        self.Menu.setTitle(_translate("MainWindow", "Edit"))
        self.MarkedRows.setTitle(_translate("MainWindow", "MarkedRows"))
        self.Copy_Special.setTitle(_translate("MainWindow", "Copy Special"))
        self.Paste_Special.setTitle(_translate("MainWindow", "Paste Special"))
        self.View.setTitle(_translate("MainWindow", "View"))
        self.Help.setTitle(_translate("MainWindow", "Help"))
        self.Insert.setTitle(_translate("MainWindow", "Insert"))
        self.Tools.setTitle(_translate("MainWindow", "Tools"))
        self.Analysis.setTitle(_translate("MainWindow", "Analysis"))
        self.actionLoad.setText(_translate("MainWindow", "Load_STDF"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionSave_As.setText(_translate("MainWindow", "Save As.."))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionUndo.setText(_translate("MainWindow", "Undo"))
        self.actionRedo.setText(_translate("MainWindow", "Redo"))
        self.actionCopy.setText(_translate("MainWindow", "Copy"))
        self.actionPaste.setText(_translate("MainWindow", "Paste"))
        self.actionDelete_Active_Page.setText(_translate("MainWindow", "Delete Active Page"))
        self.actionReset_AllFilters.setText(_translate("MainWindow", "Reset AllFilters"))
        self.actionMark_Filtered_Rows.setText(_translate("MainWindow", "Mark Filtered Rows"))
        self.actionUnmark.setText(_translate("MainWindow", "Unmark"))
        self.actionInvert.setText(_translate("MainWindow", "Invert"))
        self.actionDelete.setText(_translate("MainWindow", "Delete"))
        self.actionFilter_To.setText(_translate("MainWindow", "Filter To"))
        self.actionFilter_Out.setText(_translate("MainWindow", "Filter Out"))
        self.actionAdd_Marked_to_List.setText(_translate("MainWindow", "Add Marked to List"))
        self.actionNew_List_from_Marked.setText(_translate("MainWindow", "New List from Marked"))
        self.actionRemove_Marked_From_List.setText(_translate("MainWindow", "Remove Marked From List"))
        self.actionSerach_Marked_in_List.setText(_translate("MainWindow", "Serach Marked in List"))
        self.actionData_for_All_Items.setText(_translate("MainWindow", "Data for All Items"))
        self.actionData_for_Marked_Rows.setText(_translate("MainWindow", "Data for Marked Items"))
        self.actionAll_Rows.setText(_translate("MainWindow", "All Rows"))
        self.actionFiltered_Rows.setText(_translate("MainWindow", "Filtered Rows"))
        self.actionMarked_Rows.setText(_translate("MainWindow", "Marked Rows"))
        self.actionActive_Page.setText(_translate("MainWindow", "Active Page"))
        self.actionActive_Visualisation.setText(_translate("MainWindow", "Active Visualization"))
        self.actionActive_Visualization_Image.setText(_translate("MainWindow", "Active Visualization Image"))
        self.actionShow_Import_Settings.setText(_translate("MainWindow", "Show Import Settings"))
        self.actionAs_New_Columns.setText(_translate("MainWindow", "As New Columns"))
        self.actionAs_New_Rows.setText(_translate("MainWindow", "As New Rows"))
        self.actionReset_All_Marking.setText(_translate("MainWindow", "Reset All Marking"))
        self.actionData_Connection_Properties.setText(_translate("MainWindow", "Data Connection Properties"))
        self.actionData_Table_Properties.setText(_translate("MainWindow", "Data Table Properties"))
        self.actionColumn_Properties.setText(_translate("MainWindow", "Column Properties"))
        self.actionDocument_Properties.setText(_translate("MainWindow", "Document Properties"))
        self.actionData_Function_Properties.setText(_translate("MainWindow", "Data Function Properties"))
        self.actionFilters.setText(_translate("MainWindow", "Filters"))
        self.actionData.setText(_translate("MainWindow", "Data"))
        self.New_Page.setText(_translate("MainWindow", "New Page"))
        self.actionDuplicate_Activate_Page.setText(_translate("MainWindow", "Duplicate Activate Page"))
        self.actionCalculated_Column.setText(_translate("MainWindow", "Calculated Column"))
        self.actionColumns.setText(_translate("MainWindow", "Columns"))
        self.actionRows.setText(_translate("MainWindow", "Rows"))
        self.actionFind.setText(_translate("MainWindow", "Find"))
        self.actionTest_Summary_Report_TSR_Chart_Galliers.setText(_translate("MainWindow", "Test Summary Report ( TSR) & Chart Galliers"))
        self.actionAnalysis_of_Varicance.setText(_translate("MainWindow", "Analysis of Varicance"))
        self.actionMeasuement_System_Comparision_MSC_Analysis.setText(_translate("MainWindow", "Measuement System Comparision ( MSC) Analysis"))
        self.actionSPC_Statistical_Process_Controll.setText(_translate("MainWindow", "Statistical Process Control ( SPC)"))
        self.actionFrequency_Pareto.setText(_translate("MainWindow", "Frequency Pareto"))
        self.actionClose.setText(_translate("MainWindow", "Close"))
        self.actionAdd_Data_Table.setText(_translate("MainWindow", "Add Data Table"))
        self.actionReplae_Data_Table.setText(_translate("MainWindow", "Replae Data Table"))
        self.actionData_to_Excel.setText(_translate("MainWindow", "Data to Excel"))
        self.actionData_CSV.setText(_translate("MainWindow", "Data to CSV"))
        self.actionData_to_Text.setText(_translate("MainWindow", "Data to Text"))
        self.actionSTDF_V4.setText(_translate("MainWindow", "STDF (V4)"))
        self.actionEXCEL.setText(_translate("MainWindow", "EXCEL"))
        self.actionCSV.setText(_translate("MainWindow", "CSV"))
        self.actionTEXT.setText(_translate("MainWindow", "TEXT"))
    def Add_Tab(self):
        ''' Add the Tab to the window as Many times as we run this action'''
        # Tab Widget
        self.Tab_List.append('Page'+str(len(self.Tab_List)))
        if len(self.Tab_List)>0:
            self.Tab_List[len(self.Tab_List)-1] = QtWidgets.QWidget()     
            self.tabWidget.addTab(self.Tab_List[len(self.Tab_List)-1], 'Page'+str(len(self.Tab_List)))
    def Add_Table(self):
        '''Add the data table widgets to the current window'''
        if len(self.Tab_List)==0:
            self.Add_Tab()
            self.tabWidget.setCurrentIndex(0)  
        self.tableWidget=QTableWidget(self.Tab_List[self.tabWidget.currentIndex()])
        
        '''item = QtWidgets.QTableWidgetItem('New_Row')
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem('New_Row')
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem('New_Row')
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem('New_Row')
        self.tableWidget.setHorizontalHeaderItem(1, item)'''
        #self.tabWidget.currentWidget().addWidget(self.tableWidget)
        '''item = self.tableWidget.verticalHeaderItem(0)
        item.setText( QtCore.QCoreApplication.translate("MainWindow", "New Row"))
        item = self.tableWidget.verticalHeaderItem(1)
        item.setText( QtCore.QCoreApplication.translate("MainWindow", "New Row"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText( QtCore.QCoreApplication.translate("MainWindow", "New Column"))
        item = self.tableWidget.horizontalHeaderItem(1)
        #item.setText( QtCore.QCoreApplication.translate("MainWindow", "New Column"))   ''' 
     
    def CloseTab(self):
        '''Closes the current tab'''
        self.tabWidget.removeTab(self.tabWidget.currentIndex())
        self.Tab_List.remove(self.Tab_List[self.tabWidget.currentIndex()])
    def Add_Tool_Bar(self):
        'Add too bar'
        self.Tool_Bar=self.Main_Window.addToolBar('ToolBar')        
        self.actionExit1 = QtWidgets.QAction(self.Main_Window)
        self.actionExit1.setObjectName("actionExit")
        self.actionExit1.triggered.connect(self.Exit)
        self.actionExit1.setIcon(QtGui.QIcon("D:/2360/Scripting_data/Python_trail/GIT_HUB/Tool/STDF-READER-/Tool_GUI/Icons/Data_Table.png"))
        self.Tool_Bar.addAction(self.actionExit1)
    def Open_Load_Action(self):
        '''Opens the Load window and send the File name selected in load window to this main window, using the QtCore.pyqtsignal.'''        
        self.Load_STDF = QtWidgets.QDialog()
        self.Load_window=Ui_Load_STDF(self)
        self.Load_window.setupUi(self.Load_STDF)
        No_of_files_loaded=len(self.File_Path)
        if No_of_files_loaded!=0:            
            self.STDF_DATA={}
            self.Load_window.File_Name_to_export.connect(self.Imported_file_data.append)
            #self.Load_window.File_Name_to_export.connect(self.Ldd())
            self.Rec_Summary_list=['FAR_Rec_summary','ATR_Rec_summary','MIR_Rec_Summary','SDR_Rec_Summary', 'PMR_Rec_Summary','WCR_Rec_Summary'
            ,'WIR_Rec_Summary','PIR_Rec_Summary','PRR_Rec_Summary','MPR_Rec_Summary','WRR_Rec_Summary','TSR_Rec_Summary','HBR_Rec_Summary',
            'SBR_Rec_Summary','PCR_Rec_Summary','MRR_Rec_Summary','BPS_Rec_Summary','DTR_Rec_Summary','PGR_Rec_Summary', 'RDR_Rec_Summary'
            ,'GDR_Rec_Summary','Test_Details','Test_Flag_Details','PTR_Rec_Summary','FTR_Rec_Summary','Full_Rec_Summary']
            #self.Load_window.File_Name_to_export.connect(self.File_Name1[0].append)
        else:
            '''self.File_Name1.append('Data_File'+str(No_of_files_loaded+1))
            self.Load_window.File_Name_to_export.connect(self.File_Name1[No_of_files_loaded+1].append)#self.File_Name1.append'''  
            pass    
        self.Load_STDF.exec_()
        #self.Store_the_Data()
    def Store_the_Data(self):
        ''' Stores the loaded Data into Dictnory for ease of access'''
        if len(self.Imported_file_data)>=1:
            for i in range(len(self.Rec_Summary_list)):                
                self.STDF_DATA[self.Rec_Summary_list[i]]=self.Imported_file_data[0][i]
            self.Loaded_Data_File_count.append('File_'+str(len(self.Loaded_Data_File_count)+1))
            self.Loaded_Data_Files[self.Loaded_Data_File_count[len(self.Loaded_Data_File_count)-1]]=self.STDF_DATA
            #self.STDF_DATA.clear()
            self.Imported_file_data=[]         
            self.STDF_DATA={}
    def Open_Data_Table_properties_window(self):        
        self.Open_Data_table_proerties_win1=QtWidgets.QDialog()
        self.Open_Data_table_proerties=Ui_Data_Table_Properties_Window(ParentWindow=self)
        self.Open_Data_table_proerties.setupUi(self.Open_Data_table_proerties_win1)
        self.Open_Data_table_proerties.Add_Loaded_Data_into_list_box()
        self.Open_Data_table_proerties_win1.exec_()
    def Exit(self):
        self.Title='Delete the Data table'
        self.Msg='Are you sure want to delete the Tool..?\t if yes all data will be lost'
        self.Reply=self.Messagebox(self.Msg,'que',self.Title)
        if self.Reply==QtWidgets.QMessageBox.Yes:
            self.Main_Window.close()
        elif self.Reply==QtWidgets.QMessageBox.No:
            pass
    def Messagebox(self,msg_text,msgtype='info',title='Message Box'):
        ''' Message is a function to call the message box in PyQt Quickly.  msgtype can be (info, warn,que,criti).
            msg_text is the msg you want to display, Title will be window Title'''
        if msgtype=='info':
            reply=QMessageBox.information(self,title,msg_text,QMessageBox.Ok ,QMessageBox.Ok)
        elif msgtype=='warn':
            reply=QMessageBox.warning(self,title,msg_text,QMessageBox.Ok ,QMessageBox.Ok)
        elif msgtype=='que':
            reply=QMessageBox.question(self,title,msg_text,QMessageBox.Yes | QMessageBox.No ,QMessageBox.Yes)
        elif msgtype=='criti':
            reply=QMessageBox.critical(self,title,msg_text,QMessageBox.Ok | QMessageBox.Cancel ,QMessageBox.Ok)
        return reply
if __name__ == "__main__":
    import sys
    Main_Application = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()    
    ui_Main_Window = Ui_MainWindow()
    ui_Main_Window.setupUi(MainWindow) 
    MainWindow.show()    
    sys.exit(Main_Application.exec_())

